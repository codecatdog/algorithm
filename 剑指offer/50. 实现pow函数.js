/**
 * 实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，x^n）。不得使用库函数，同时不需要考虑大数问题。
 * 
 * 思路：快速幂
 * 利用十进制数字 n 的二进制表示，可对快速幂进行数学化解释。
 * 对于任意的十进制数n，设其二进制表示为 bm...b3b2b1 (bi为二进制某位值)
 * 则 n = bm*2^(m-1) + ... + b3 * 2^2 + b2 * 2 + b1 * 1
 * 则 x ^ n 
 * 
 * >>是有符号数的移位( >> ,<<表示算数移位，移动时要考虑符号位, 1101（-3）算术右移1位 1110（-2）)，
 * >>>这个是无符号数的移位(>>>,<<<表示逻辑移位,整体左右移，缺位补0, 1101逻辑右移1位 0110； 1101逻辑左移1位 1010)
 */

/**
 * @param {number} x
 * @param {number} n
 * @return {number}
 */
var myPow = function(x, n) {
    if(x === 0) return 0;
    if(n < 0) {
        x = 1 / x;
        n = -n;
    }
    let res = 1;
    while(n) {
        if(n & 1) {
            res *= x
        }
        x *= x;
        n >>>= 1; // Math.floor(n / 2);
    }
    return n;
};

console.log(myPow(2, -2147483648))