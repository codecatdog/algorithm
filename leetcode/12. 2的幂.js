/**
 * 给你一个整数 n，请你判断该整数是否是 2 的幂次方。
 * 如果存在一个整数 x 使得 n == 2^x ，则认为 n 是 2 的幂次方。
 * 
 * 示例 1：
 *  输入：n = 1
 *  输出：true
 *  解释：2^0 = 1 
 * 
 * 思路：利用二进制，若n为2的幂，则一定有(n & (n - 1)) === 0;
 * 
 * 解释：若n = 2 ^ x， 则n的二进制表达只有一位是1，其余位都是0；
 *       (2^0、2^1、2^2...)(假设为2^3 --> 1000)
 *       此时，n-1 的二进制表达为 n为1的那个位置为0，右侧全部为1；(2^3-1 --> 0111)
 *       因此，有(n & (n - 1)) === 0; (1000 & 0111 === 0)
 * 
 *       又因为n = 2 ^ x, 当x -> -∞时，n有最小值趋近于0但大于0。
 *       所以若n = 2 ^ x, 必定有n > 0;
 */

/**
 * @param {number} n
 * @return {boolean}
 */
var isPowerOfTwo = function(n) {
    return n > 0 && (n & (n - 1)) === 0;
};

console.log(isPowerOfTwo(16))